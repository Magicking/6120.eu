<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>starknet on 6120's Notes</title><link>https://6120.eu/tags/starknet/</link><description>Recent content in starknet on 6120's Notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright/><lastBuildDate>Fri, 03 Feb 2023 19:00:03 +0100</lastBuildDate><atom:link href="https://6120.eu/tags/starknet/index.xml" rel="self" type="application/rss+xml"/><item><title>StarkNet &amp; Cairo significant changes developer opinionated view</title><link>https://6120.eu/posts/cairo-changelog-pov/</link><pubDate>Fri, 03 Feb 2023 19:00:03 +0100</pubDate><guid>https://6120.eu/posts/cairo-changelog-pov/</guid><description>What&amp;rsquo;s new in Cairo? There have been a lot of changes since the Cairo language has been released. This is a developer opinionated list of the major changes since the first release, 0.6.2 (Dec 2021).
StarkWareLtd last release CairoLang v0.10.3 (Dec 5, 2022) also named Cairo 1.0.
Useful links:
CairoLang releases Useful info from StarkNet documentation StarkNet Community Call #32 Upcoming versions v0.10. (Cairo 1.0) (breaking changes version) Dec.</description><content>&lt;h1 id="whats-new-in-cairo">What&amp;rsquo;s new in Cairo?&lt;/h1>
&lt;p>There have been a lot of changes since the Cairo language has been released. This is a developer opinionated list of the major changes since the first release, 0.6.2 (Dec 2021).&lt;/p>
&lt;p>StarkWareLtd last release CairoLang v0.10.3 (Dec 5, 2022) also named Cairo 1.0.&lt;/p>
&lt;p>Useful links:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/starkware-libs/cairo-lang/releases">CairoLang releases&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.starknet.io/documentation/useful_info/">Useful info&lt;/a> from StarkNet documentation&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=CKYM25oicTA">StarkNet Community Call #32&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.starknet.io/documentation/starknet_versions/upcoming_versions/">Upcoming versions&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="v010-cairo-10">v0.10. (Cairo 1.0)&lt;/h1>
&lt;p>(breaking changes version)
&lt;strong>Dec. 5 2022&lt;/strong> v0.10.0-pre Pre-release&lt;/p>
&lt;p>Starknet has its core language modified, it&amp;rsquo;s now a Rusty lang, Starknet foresaw the future of Rust based smart-contract ecosystem (&lt;a href="https://news.coincu.com/90055-fall-of-terra/">Luna developers&lt;/a> and Solana)&lt;/p>
&lt;ul>
&lt;li>
&lt;p>End statements with ;&lt;/p>
&lt;ul>
&lt;li>Note that new lines are still part of the language at this point, and you cannot put more than one instruction per line. This will change in Cairo1.0.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Use { â€¦ } for code blocks (instead of : and end)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Add () around the condition of if statements&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Remove the member keyword in structs&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Change comment to use // instead of #&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &amp;hellip;, ap++ instead of &amp;hellip;; ap++ in low level Cairo code&lt;/p>
&lt;/li>
&lt;li>
&lt;p>New transaction version&lt;/p>
&lt;ul>
&lt;li>Nonce are enforced as part of the transaction (bye bye UTXO model)&lt;/li>
&lt;li>Invoke execution object with &lt;a href="https://github.com/OpenZeppelin/cairo-contracts/blob/d12abf335f5c778fd19d6f99e91c099b40865deb/src/openzeppelin/account/presets/EthAccount.cairo#L81">&lt;strong>__validate__&lt;/strong>&lt;/a> and &lt;a href="https://github.com/OpenZeppelin/cairo-contracts/blob/d12abf335f5c778fd19d6f99e91c099b40865deb/src/openzeppelin/account/presets/EthAccount.cairo#L127">&lt;strong>__execute__&lt;/strong>&lt;/a> to differentiate between validation of the transaction (wether or not execution works (TODO: wild guess)) and execution that his pickup by another part of the process in the decentralized system(TODO: confirm)&lt;/li>
&lt;li>Declare function to send implementation code for registration for future instantiation&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Bridge Layer1 to Layer2&lt;/p>
&lt;ul>
&lt;li>New &lt;strong>fee&lt;/strong> field in &lt;a href="https://github.com/starkware-libs/cairo-lang/blob/54d7e92a703b3b5a1e07e9389608178129946efc/src/starkware/starknet/solidity/IStarknetMessagingEvents.sol#L9">LogMessageToL2 event&lt;/a> when executing L2 contract from L1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Tx simulation and fee estimation&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Support the EC-op builtin. to allows to verify ECDSA signatures&lt;/p>
&lt;/li>
&lt;li>
&lt;p>API: Remove entry_point_type field from transaction information&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="v09x">v0.9.x&lt;/h1>
&lt;p>Fees are now enforced on StarkNet, no more free candy!&lt;/p>
&lt;p>Contracts must be declared first and then instanciated through the new &lt;a href="https://starknet.io/docs/hello_starknet/deploying_from_contracts.html#the-deploy-system-call">deploy syscall&lt;/a> forcing 2 manual transactions for contracts deployed by EOA.&lt;/p>
&lt;h1 id="v081">v0.8.1&lt;/h1>
&lt;p>Fees are in now! What&amp;rsquo;s up with that &lt;a href="https://github.com/starkware-libs/cairo-lang/blob/4e233516f52477ad158bc81a86ec2760471c1b65/src/starkware/starknet/business_logic/transaction_fee.py">code&lt;/a> ? See more &lt;a href="https://starknet.io/documentation/fee-mechanism/#Introduction">here&lt;/a>.
&lt;img src="https://i.imgur.com/G2ZidCf.png" alt="">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>charge_fee &lt;img src="https://i.imgur.com/GnKEkFI.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>calculate_tx_fee_by_cairo_usage &lt;img src="https://i.imgur.com/wYIohf7.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/eth/StarknetMessaging.sol">L1 -&amp;gt; L2 message cancellation&lt;/a>
&lt;img src="https://i.imgur.com/P4UB8Wm.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>version&lt;/code> and &lt;code>max_fee&lt;/code> are part of the transaction structure now&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>__execute__&lt;/code> is now required mandatory entry point for account contract, see more &lt;a href="https://github.com/OpenZeppelin/cairo-contracts/blob/main/docs/Account.md#accounts">here&lt;/a>
&lt;img src="https://i.imgur.com/gIcuAdK.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Added the cryptographic hash function &lt;a href="https://en.wikipedia.org/wiki/BLAKE_(hash_function)">blake2s&lt;/a> to the standard library&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="cairo">Cairo&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Meaningful error messaging(v0.7.0) including local variables and arguments
&lt;img src="https://i.imgur.com/AwjYaIV.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>High level memory allocation with the &lt;code>new&lt;/code> keyword in execution memory segment (whereas &lt;code>alloc&lt;/code> allocates a new memory segment)
&lt;img src="https://i.imgur.com/gFPTHzw.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Tuples and type aliases, will increase the pythonic vibes of Cairo even further
&lt;img src="https://i.imgur.com/Ya3bPcE.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Fix for python 3.9&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="v07x">v0.7.x&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/starkware-libs/cairo-lang/blob/4e233516f52477ad158bc81a86ec2760471c1b65/src/starkware/starknet/services/api/messages.py#L80">Added a nonce for L1 to L2 message&lt;/a> this prevents sending the same message twice from the EVM world, e.g: calling a function.
&lt;img src="https://i.imgur.com/3SPa5Fz.png" alt="">&lt;/li>
&lt;/ul>
&lt;h1 id="addition-of-evm-compatibilities">Addition of EVM compatibilities&lt;/h1>
&lt;ul>
&lt;li>events are here !&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/rXdCLNc.png" alt="">
&lt;img src="https://i.imgur.com/uOzGLmA.png" alt="">&lt;/p>
&lt;p>(editor&amp;rsquo;s note: TheGraph but for StarkNet please.)&lt;/p>
&lt;ul>
&lt;li>delegate calls
prepend delegate_ to external contract function name or &lt;code>l1_handler&lt;/code>&lt;/li>
&lt;li>The &lt;code>__default__&lt;/code> entry point is introduced, it is similar to the Solidity fallback method as it is executed after missing on the function selector.&lt;/li>
&lt;li>The &lt;code>__l1_default__&lt;/code> entry point same as &lt;code>__default__&lt;/code> but for in-protocol message from the L1.&lt;/li>
&lt;/ul>
&lt;h2 id="new-syscalls">New syscalls&lt;/h2>
&lt;ul>
&lt;li>get_block_timestamp()
Returns a random number that sometimes appears to grow over time, currently around since 1970-01-01.
Notice of deprecation for get_tx_signature(), get_tx_info() is now preferred.&lt;/li>
&lt;/ul></content></item><item><title>StarkNet Phase 1 - Freebox Validator</title><link>https://6120.eu/posts/starknet-staking-p1/</link><pubDate>Fri, 03 Feb 2023 19:00:03 +0100</pubDate><guid>https://6120.eu/posts/starknet-staking-p1/</guid><description>Introduction StarkNet staking 1st phase consist of solely running a full RPC node, at the time of writing, staking ask for 20_000 Strk tokens (~3700$). As there is no validator duties linking performance and reward it&amp;rsquo;s an ideal moment to start scaling from the bottom.
As a minimum viable product I choose a Virtual Machine (VM) running on my Internet Service Provider(ISP) router Freebox, because it&amp;rsquo;s a system that cost me almost nothing, always running and can host VMs.</description><content>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>&lt;a href="https://www.starknet.io/blog/staking-phase-1/">StarkNet staking 1st phase&lt;/a> consist of solely running a full RPC node, at the time of writing, staking ask for 20_000 Strk tokens (~3700$). As there is no validator duties linking performance and reward it&amp;rsquo;s an ideal moment to start scaling from the bottom.&lt;/p>
&lt;p>As a minimum viable product I choose a Virtual Machine (VM) running on my Internet Service Provider(ISP) router Freebox, because it&amp;rsquo;s a system that cost me almost nothing, always running and can host VMs.&lt;/p>
&lt;h2 id="hardware-setup">Hardware Setup&lt;/h2>
&lt;p>The Freebox Delta router, while primarily designed for home networking, surprisingly packs enough punch for our needs. Under the hood, it features a Quad-Core Armv8 Cortex A-72 processor and 2GB of RAM, which while modest, proved sufficient for our initial testing phase. The storage setup: two Crucial BX500 SATA SSDs in a 1TB RAID1 configuration.&lt;/p>
&lt;h2 id="initial-setup-and-challenges">Initial Setup and Challenges&lt;/h2>
&lt;p>Getting the StarkNet full node up and running on the Freebox was an exercise in resource optimization. The initial state synchronization proved to be the first major hurdle, with the limited RAM requiring careful memory management. The process took several days to complete, with the node frequently hitting memory limits during peak synchronization periods. Network bandwidth, while not a primary concern give the Freebox&amp;rsquo;s gigabit connection a low latency, and needed careful monitoring to ensure it didn&amp;rsquo;t impact household internet usage.&lt;/p>
&lt;h2 id="validator-implementation">Validator Implementation&lt;/h2>
&lt;p>The validator setup was surprisingly straightforward once the full node was operational as there was no implementation existing (Note, there are now 2 implementation existing). Monitoring was handled through a combination of Prometheus and Grafana, giving us real-time insights into the node&amp;rsquo;s performance and health.&lt;/p>
&lt;h2 id="performance-analysis">Performance Analysis&lt;/h2>
&lt;p>During normal operation, the Freebox validator handled block processing adequately, maintaining sync with the network without issues. However, the limitations became apparent during high transaction volume periods. The quad-core ARM processor, while efficient, struggled to keep up with the computational demands of processing large blocks during network congestion. This was particularly evident during High TPS events(TBD screenshot), where transaction throughput would spike dramatically.&lt;/p>
&lt;h2 id="lessons-learned">Lessons Learned&lt;/h2>
&lt;p>The Freebox experiment taught us several valuable lessons about validator requirements. While the setup worked for Phase 1&amp;rsquo;s basic requirements, it highlighted the importance of having headroom for processing power during network stress. The RAID1 storage setup proved fine, but the 2GB RAM limitation was a constant challenge. For future phases, we&amp;rsquo;ll need to consider more powerful hardware for full node, and separate signers particularly as validator duties become active.&lt;/p>
&lt;h2 id="next-steps">Next Steps&lt;/h2>
&lt;p>Moving forward, we&amp;rsquo;re considering several options to improve our setup. A dedicated mini-PC with more RAM and a more powerful processor would be the logical next step, while still maintaining the cost-effectiveness that made the Freebox experiment appealing. We&amp;rsquo;re also exploring ways to optimize the node software to better handle high-throughput periods.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>The Freebox validator experiment was a valuable learning experience in Phase 1 of StarkNet&amp;rsquo;s staking journey. While the hardware limitations prevented optimal performance during high-stress periods, it successfully demonstrated that running a validator doesn&amp;rsquo;t require expensive enterprise-grade equipment. The experience has given us valuable insights into the minimum requirements for future phases and helped us identify areas for improvement in our setup.&lt;/p></content></item></channel></rss>